openapi: 3.0.1
info:
  title: Runbook API Spec
  description: 'This is the API definition for runbook.  You can find out more about Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For
    this sample, you can use the api key `special-key` to test the authorization filters.'
  termsOfService: http://runbook.swagger.io/terms/
  contact:
    email: chasecook411@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://runbook.swagger.io/v2
  - url: http://runbook.swagger.io/v2
tags:
  - name: runbook
    description: API definition for Runbooks
    externalDocs:
      description: Find out more
      url: http://placeholder
  - name: user
    description: Operations about users
    externalDocs:
      description: Find out more
      url: http://placeholder
paths:
  /runbook:
    put:
      tags:
        - runbook
      summary: Update an existing runbook
      operationId: updateRunbook
      requestBody:
        description: Runbook object to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Runbook'
          application/xml:
            schema:
              $ref: '#/components/schemas/Runbook'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Runbook not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
        - runbook_auth:
            - write:runbook
            - read:runbook
      x-codegen-request-body-name: body
    post:
      tags:
        - runbook
      summary: Add a new runbook
      operationId: addRunbook
      requestBody:
        description: Runbook object to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Runbook'
          application/xml:
            schema:
              $ref: '#/components/schemas/Runbook'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - runbook_auth:
            - write:runbook
            - read:runbook
      x-codegen-request-body-name: body
  /runbook/findByStatus:
    get:
      tags:
        - runbook
      summary: Finds Runbooks by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findRunbooksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Runbook'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Runbook'
        400:
          description: Invalid status value
          content: {}
      security:
        - runbook_auth:
            - write:runbook
            - read:runbook
  /runbook/findByTags:
    get:
      tags:
        - runbook
      summary: Finds Runbooks by tags
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: findRunbooksByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Runbook'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Runbook'
        400:
          description: Invalid tag value
          content: {}
      deprecated: true
      security:
        - runbook_auth:
            - write:runbooks
            - read:runbooks
  /runbook/{runbookId}:
    get:
      tags:
        - runbook
      summary: Find runbook by ID
      description: Returns a single runbook
      operationId: getRunbookById
      parameters:
        - name: runbookId
          in: path
          description: ID of runbook to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Runbook'
            application/json:
              schema:
                $ref: '#/components/schemas/Runbook'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Runbook not found
          content: {}
      security:
        - api_key: []
    post:
      tags:
        - runbook
      summary: Updates a Runbook with form data
      operationId: updateRunbookWithForm
      parameters:
        - name: runbookId
          in: path
          description: ID of runbook that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the Runbook
                status:
                  type: string
                  description: Updated status of the runbook
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - runbook_auth:
            - write:runbook
            - read:runbook
    delete:
      tags:
        - runbook
      summary: Deletes a runbook
      operationId: deleteRunbook
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: runbookId
          in: path
          description: Runbook id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Runbook not found
          content: {}
      security:
        - runbook_auth:
            - write:runbook
            - read:runbook
  /runbook/{runbookId}/uploadImage:
    post:
      tags:
        - runbook
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: runbookId
          in: path
          description: ID of runbook to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - runbook_auth:
            - write:runbook
            - read:runbook
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        runbookId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Runbook:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: runbook status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Runbook
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    runbook_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://runbook.swagger.io/oauth/dialog
          scopes:
            write:runbook: modify runbooks in your account
            read:runbook: read your runbook
    api_key:
      type: apiKey
      name: api_key
      in: header
